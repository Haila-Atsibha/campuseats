generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  CAFE_OWNER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(CUSTOMER)
  foods     Food[] // if CAFE_OWNER
  orders    Order[] // if CUSTOMER
  cart      CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Food {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     Int
  orders      OrderItem[]
  cart        CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id        Int         @id @default(autoincrement())
  total     Float
  status    OrderStatus @default(PENDING)
  student   User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  food     Food  @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId   Int
  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  Int
  quantity Int
  price    Float
}

model CartItem {
  id        Int      @id @default(autoincrement())
  student   User     @relation(fields: [studentId], references: [id])
  studentId Int
  food      Food     @relation(fields: [foodId], references: [id])
  foodId    Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
